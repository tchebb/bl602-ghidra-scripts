# Parse the BL602 ROM API (a.k.a. RomDriver) table to create and name all functions it points to
#
# How to use:
#  1. Make sure a ROM dump of your chip is loaded in your memory map.
#  2. Create a 508-element array of pointers named "ROM_APITABLE" that contains
#     all but the first four entries (which are reserved) of the ROM function
#     table (located at 0x21010800).
#  3. Run this script.

from ghidra.program.model.symbol import SourceType

# Derived from ROM_API_INDEX_e enum in bouffalolab/bl_iot_sdk,
# components/bl602/bl602_std/bl602_std/StdDriver/Inc/bl602_romdriver.h.
ROM_SYMBOLS = [
    "AON_Power_On_MBG",
    "AON_Power_Off_MBG",
    "AON_Power_On_XTAL",
    "AON_Set_Xtal_CapCode",
    "AON_Get_Xtal_CapCode",
    "AON_Power_Off_XTAL",
    "AON_Power_On_BG",
    "AON_Power_Off_BG",
    "AON_Power_On_LDO11_SOC",
    "AON_Power_Off_LDO11_SOC",
    "AON_Power_On_LDO15_RF",
    "AON_Power_Off_LDO15_RF",
    "AON_Power_On_SFReg",
    "AON_Power_Off_SFReg",
    "AON_LowPower_Enter_PDS0",
    "AON_LowPower_Exit_PDS0",
    "ASM_Delay_Us",
    "BL602_Delay_US",
    "BL602_Delay_MS",
    "BL602_MemCpy",
    "BL602_MemCpy4",
    "BL602_MemCpy_Fast",
    "BL602_MemSet",
    "BL602_MemSet4",
    "BL602_MemCmp",
    "EF_Ctrl_Sw_AHB_Clk_0",
    "EF_Ctrl_Program_Efuse_0",
    "EF_Ctrl_Load_Efuse_R0",
    "EF_Ctrl_Busy",
    "EF_Ctrl_AutoLoad_Done",
    "EF_Ctrl_Get_Trim_Parity",
    "EF_Ctrl_Read_RC32M_Trim",
    "EF_Ctrl_Read_RC32K_Trim",
    "EF_Ctrl_Clear",
    "GLB_Get_Root_CLK_Sel",
    "GLB_Set_System_CLK_Div",
    "GLB_Get_BCLK_Div",
    "GLB_Get_HCLK_Div",
    "Update_SystemCoreClockWith_XTAL",
    "GLB_Set_System_CLK",
    "System_Core_Clock_Update_From_RC32M",
    "GLB_Set_SF_CLK",
    "GLB_Set_PKA_CLK_Sel",
    "GLB_SW_System_Reset",
    "GLB_SW_CPU_Reset",
    "GLB_SW_POR_Reset",
    "GLB_Select_Internal_Flash",
    "GLB_Select_External_Flash",
    "GLB_Deswap_Flash_Pin",
    "GLB_Swap_Flash_Pin",
    "GLB_GPIO_Init",
    "GLB_GPIO_OUTPUT_Enable",
    "GLB_GPIO_OUTPUT_Disable",
    "GLB_GPIO_Set_HZ",
    "GLB_GPIO_Get_Fun",
    "HBN_Mode_Enter",
    "HBN_Power_Down_Flash",
    "HBN_Enable",
    "HBN_Reset",
    "HBN_Set_Ldo11_Aon_Vout",
    "HBN_Set_Ldo11_Rt_Vout",
    "HBN_Set_Ldo11_Soc_Vout",
    "HBN_32K_Sel",
    "HBN_Set_ROOT_CLK_Sel",
    "HBN_Power_On_Xtal_32K",
    "HBN_Power_Off_Xtal_32K",
    "HBN_Power_On_RC32K",
    "HBN_Power_Off_RC32K",
    "HBN_Trim_RC32K",
    "HBN_Hw_Pu_Pd_Cfg",
    "HBN_Pin_WakeUp_Mask",
    "HBN_GPIO7_Dbg_Pull_Cfg",
    "HBN_Set_Embedded_Flash_Pullup",
    "L1C_Set_Wrap",
    "L1C_Set_Way_Disable",
    "L1C_IROM_2T_Access_Set",
    "PDS_Reset",
    "PDS_Enable",
    "PDS_Force_Config",
    "PDS_RAM_Config",
    "PDS_Default_Level_Config",
    "PDS_Trim_RC32M",
    "PDS_Select_RC32M_As_PLL_Ref",
    "PDS_Select_XTAL_As_PLL_Ref",
    "PDS_Power_On_PLL",
    "PDS_Enable_PLL_All_Clks",
    "PDS_Disable_PLL_All_Clks",
    "PDS_Enable_PLL_Clk",
    "PDS_Disable_PLL_Clk",
    "PDS_Power_Off_PLL",
    "SEC_Eng_Turn_On_Sec_Ring",
    "SEC_Eng_Turn_Off_Sec_Ring",
    "SFlash_Init",
    "SFlash_SetSPIMode",
    "SFlash_Read_Reg",
    "SFlash_Write_Reg",
    "SFlash_Busy",
    "SFlash_Write_Enable",
    "SFlash_Qspi_Enable",
    "SFlash_Volatile_Reg_Write_Enable",
    "SFlash_Chip_Erase",
    "SFlash_Sector_Erase",
    "SFlash_Blk32_Erase",
    "SFlash_Blk64_Erase",
    "SFlash_Erase",
    "SFlash_Program",
    "SFlash_GetUniqueId",
    "SFlash_GetJedecId",
    "SFlash_GetDeviceId",
    "SFlash_Powerdown",
    "SFlash_Releae_Powerdown",
    "SFlash_SetBurstWrap",
    "SFlash_DisableBurstWrap",
    "SFlash_Software_Reset",
    "SFlash_Reset_Continue_Read",
    "SFlash_Set_IDbus_Cfg",
    "SFlash_IDbus_Read_Enable",
    "SFlash_Cache_Enable_Set",
    "SFlash_Cache_Flush",
    "SFlash_Cache_Read_Enable",
    "SFlash_Cache_Hit_Count_Get",
    "SFlash_Cache_Miss_Count_Get",
    "SFlash_Cache_Read_Disable",
    "SFlash_Read",
    "SFlash_Read_Reg_With_Cmd",
    "SFlash_Write_Reg_With_Cmd",
    "SFlash_Restore_From_Powerdown",
    "SF_Cfg_Init_Ext_Flash_Gpio",
    "SF_Cfg_Init_Internal_Flash_Gpio",
    "SF_Cfg_Deinit_Ext_Flash_Gpio",
    "SF_Cfg_Restore_GPIO17_Fun",
    "SF_Cfg_Get_Flash_Cfg_Need_Lock",
    "SF_Cfg_Init_Flash_Gpio",
    "SF_Cfg_Flash_Identify",
    "SF_Ctrl_Enable",
    "SF_Ctrl_Select_Pad",
    "SF_Ctrl_Set_Owner",
    "SF_Ctrl_Disable",
    "SF_Ctrl_AES_Enable_BE",
    "SF_Ctrl_AES_Enable_LE",
    "SF_Ctrl_AES_Set_Region",
    "SF_Ctrl_AES_Set_Key",
    "SF_Ctrl_AES_Set_Key_BE",
    "SF_Ctrl_AES_Set_IV",
    "SF_Ctrl_AES_Set_IV_BE",
    "SF_Ctrl_AES_Enable",
    "SF_Ctrl_AES_Disable",
    "SF_Ctrl_Set_Flash_Image_Offset",
    "SF_Ctrl_Get_Flash_Image_Offset",
    "SF_Ctrl_Select_Clock",
    "SF_Ctrl_SendCmd",
    "SF_Ctrl_Icache_Set",
    "SF_Ctrl_Icache2_Set",
    "SF_Ctrl_GetBusyState",
    "SF_Ctrl_Is_AES_Enable",
    "SF_Ctrl_Get_Clock_Delay",
    "SF_Ctrl_Set_Clock_Delay",
    "XIP_SFlash_State_Save",
    "XIP_SFlash_State_Restore",
    "XIP_SFlash_Erase_Need_Lock",
    "XIP_SFlash_Write_Need_Lock",
    "XIP_SFlash_Read_Need_Lock",
    "XIP_SFlash_GetJedecId_Need_Lock",
    "XIP_SFlash_GetDeviceId_Need_Lock",
    "XIP_SFlash_GetUniqueId_Need_Lock",
    "XIP_SFlash_Read_Via_Cache_Need_Lock",
    "XIP_SFlash_Read_With_Lock",
    "XIP_SFlash_Write_With_Lock",
    "XIP_SFlash_Erase_With_Lock",
    "XIP_SFlash_Opt_Enter",
    "XIP_SFlash_Opt_Exit",
    "BFLB_Soft_CRC32",
]

table_sym = getSymbols('ROM_APITABLE', None)[0]

table_arr = getDataAt(table_sym.getAddress())
assert table_arr.isArray(), "Expected ROM_APITABLE to be an array"

for i in range(table_arr.getNumComponents()):
    cur_elem = table_arr.getComponent(i)
    assert cur_elem.isPointer(), "Expected ROM_APITABLE[{}] to be a pointer".format(i)

    cur_ptr = cur_elem.getValue()
    if cur_ptr.getOffset() == 0xdeedbeef:
        continue

    cur_name = ROM_SYMBOLS[i]

    cur_func = getFunctionAt(cur_ptr)
    if cur_func is not None:
        print("Renaming function {} to {}".format(cur_func.getName(), cur_name))
        cur_func.setName(cur_name, SourceType.USER_DEFINED)
    else:
        print("Creating function {} at {}".format(cur_name, cur_ptr))
        cur_func = createFunction(cur_ptr, cur_name)
